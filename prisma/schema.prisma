generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievements {
  idAchievement     String               @id @default(dbgenerated("gen_random_uuid()")) @map("id_achievement") @db.Uuid
  imageUrl          String?              @map("image_url")
  title             String               @db.VarChar(255)
  description       String?
  createdAt         DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  achievementsUsers achievementsUsers[]
}

model achievementsUsers {
  idAchievementUser String       @id @default(dbgenerated("gen_random_uuid()")) @map("id_achievement_user") @db.Uuid
  idAchievement     String       @map("id_achievement") @db.Uuid
  idUser            String       @map("id_user") @db.Uuid
  achievedAt        DateTime?    @default(now()) @map("achieved_at") @db.Timestamp(6)
  achievements      achievements @relation(fields: [idAchievement], references: [idAchievement], onDelete: Cascade, onUpdate: NoAction)
  users             users        @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
}

model admins {
  idAdmin String @id @default(dbgenerated("gen_random_uuid()")) @map("id_admin") @db.Uuid
  idUser  String @map("id_user") @db.Uuid
  users   users  @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
}

model blacklistTokens {
  idToken   String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_token") @db.Uuid
  token     String
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
}

model categories {
  idCategory   String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_category") @db.Uuid
  nameCategory String    @map("name_category") @db.VarChar(255)
  descCategory String?   @map("desc_category")
  imgCategory  String?   @map("img_category")
  slugCategory String    @unique @map("slug_category") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  routes       routes[]

  @@index([slugCategory], map: "idx_categories_slug")
}

model clients {
  idClient String  @id @default(dbgenerated("gen_random_uuid()")) @map("id_client") @db.Uuid
  idUser   String  @map("id_user") @db.Uuid
  phone    String? @db.VarChar(15)
  users    users   @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
}

model comments {
  idComment        String     @id @default(dbgenerated("gen_random_uuid()")) @map("id_comment") @db.Uuid
  idUser           String     @map("id_user") @db.Uuid
  idRoute          String     @map("id_route") @db.Uuid
  body             String
  imgComment       String?    @map("img_comment")
  idParentComment  String?    @map("id_parent_comment") @db.Uuid
  createdAt        DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)
  comments         comments?  @relation("commentsTocomments", fields: [idParentComment], references: [idComment], onDelete: Cascade, onUpdate: NoAction)
  otherComments    comments[] @relation("commentsTocomments")
  routes           routes     @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  users            users      @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_comments_route_id")
  @@index([idUser], map: "idx_comments_user_id")
}

model favorites {
  idFavorite String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_favorite") @db.Uuid
  idUser     String    @map("id_user") @db.Uuid
  idRoute    String    @map("id_route") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  routes     routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_favorites_route_id")
  @@index([idUser], map: "idx_favorites_user_id")
}

model imagesRoutes {
  idImage    String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_image") @db.Uuid
  idRoute    String    @map("id_route") @db.Uuid
  imageUrl   String    @map("image_url")
  type       String?   @default("gallery") @db.VarChar(50)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  routes     routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  idNotification     String                @id @default(dbgenerated("gen_random_uuid()")) @map("id_notification") @db.Uuid
  title              String                @db.VarChar(255)
  description        String?
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  notificationsUsers notificationsUsers[]
}

model notificationsUsers {
  idNotificationUser String        @id @default(dbgenerated("gen_random_uuid()")) @map("id_notification_user") @db.Uuid
  idNotification     String        @map("id_notification") @db.Uuid
  idUser             String        @map("id_user") @db.Uuid
  isRead             Boolean?      @default(false) @map("is_read")
  createdAt          DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  notifications      notifications @relation(fields: [idNotification], references: [idNotification], onDelete: Cascade, onUpdate: NoAction)
  users              users         @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
}

model ratings {
  idRating     String          @id @default(dbgenerated("gen_random_uuid()")) @map("id_rating") @db.Uuid
  description  String?
  usersRatings usersRatings[]
}

model refreshTokens {
  idRefreshToken String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_refresh_token") @db.Uuid
  idUser         String    @map("id_user") @db.Uuid
  token          String
  expiresAt      DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  users          users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
}

model routes {
  idRoute            String          @id @default(dbgenerated("gen_random_uuid()")) @map("id_route") @db.Uuid
  idUser             String          @map("id_user") @db.Uuid
  title              String          @db.VarChar(255)
  description        String?
  coordinates        Json
  level              String?         @db.VarChar(50)
  distance           Float?
  duration           Int?
  averageRating      Float?          @default(0) @map("average_rating")
  startCoordinates   Json?           @map("start_coordinates")
  idCategory         String?         @map("id_category") @db.Uuid
  slugRoute          String?         @unique @map("slug_route") @db.VarChar(255)
  isPublic           Boolean?        @default(true) @map("is_public")
  createdAt          DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?       @default(now()) @map("updated_at") @db.Timestamp(6)
  positiveGradient   Decimal?        @map("positive_gradient") @db.Decimal
  negativeGradient   Decimal?        @map("negative_gradient") @db.Decimal
  cumulativeGradient Decimal?        @map("cumulative_gradient") @db.Decimal
  location           String?
  comments           comments[]
  favorites          favorites[]
  imagesRoutes       imagesRoutes[]
  categories         categories?     @relation(fields: [idCategory], references: [idCategory], onUpdate: NoAction)
  users              users           @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
  usersRatings       usersRatings[]

  @@index([slugRoute], map: "idx_routes_slug")
  @@index([idUser], map: "idx_routes_user_id")
  @@index([idCategory], map: "idx_routes_id_category")
}

model users {
  idUser             String                @id @default(dbgenerated("gen_random_uuid()")) @map("id_user") @db.Uuid
  imgUser            String?               @map("img_user")
  email              String                @unique @db.VarChar(150)
  username           String                @unique @db.VarChar(50)
  name               String?               @db.VarChar(100)
  surname            String?               @db.VarChar(100)
  birthdate          DateTime?             @db.Date
  bio                String?
  password           String                @db.VarChar(255)
  role               String?               @default("client") @db.VarChar(20)
  isActive           Boolean?              @default(true) @map("is_active")
  isDeleted          Boolean?              @default(false) @map("is_deleted")
  premiumLevel       Int?                  @default(0) @map("premium_level")
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?             @default(now()) @map("updated_at") @db.Timestamp(6)
  achievementsUsers  achievementsUsers[]
  admins             admins[]
  clients            clients[]
  comments           comments[]
  favorites          favorites[]
  notificationsUsers notificationsUsers[]
  refreshTokens      refreshTokens[]
  routes             routes[]
  usersRatings       usersRatings[]
}

model usersRatings {
  idUserRating String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_user_rating") @db.Uuid
  idRating     String    @map("id_rating") @db.Uuid
  idUser       String    @map("id_user") @db.Uuid
  idRoute      String    @map("id_route") @db.Uuid
  ratingValue  Int?      @map("rating_value")
  comment      String?
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  ratings      ratings   @relation(fields: [idRating], references: [idRating], onDelete: Cascade, onUpdate: NoAction)
  routes       routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  users        users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_users_ratings_route_id")
  @@index([idUser], map: "idx_users_ratings_user_id")
}
