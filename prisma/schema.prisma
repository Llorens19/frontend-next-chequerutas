generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Achievements {
  idAchievement     String              @id @default(dbgenerated("gen_random_uuid()")) @map("id_achievement") @db.Uuid
  imageUrl          String?             @map("image_url")
  title             String              @db.VarChar(255)
  description       String?
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  achievementsUsers AchievementsUsers[]

  @@map("achievements")
}

model AchievementsUsers {
  idAchievementUser String       @id @default(dbgenerated("gen_random_uuid()")) @map("id_achievement_user") @db.Uuid
  idAchievement     String       @map("id_achievement") @db.Uuid
  idUser            String       @map("id_user") @db.Uuid
  achievedAt        DateTime?    @default(now()) @map("achieved_at") @db.Timestamp(6)
  achievement       Achievements @relation(fields: [idAchievement], references: [idAchievement], onDelete: Cascade, onUpdate: NoAction)
  user              Users        @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@map("achievements_users")
}

model Admins {
  idAdmin String @id @default(dbgenerated("gen_random_uuid()")) @map("id_admin") @db.Uuid
  idUser  String @unique @map("id_user") @db.Uuid
  user    Users  @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@map("admins")
}

model Categories {
  idCategory   String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_category") @db.Uuid
  nameCategory String    @map("name_category") @db.VarChar(255)
  descCategory String?   @map("desc_category")
  imgCategory  String?   @map("img_category")
  slugCategory String    @unique @map("slug_category") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  routes       Routes[]

  @@index([slugCategory], map: "idx_categories_slug")
  @@map("categories")
}

model Clients {
  idClient String  @id @default(dbgenerated("gen_random_uuid()")) @map("id_client") @db.Uuid
  idUser   String  @unique @map("id_user") @db.Uuid
  phone    String? @db.VarChar(15)
  user     Users   @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@map("clients")
}

model Comments {
  idComment       String     @id @default(dbgenerated("gen_random_uuid()")) @map("id_comment") @db.Uuid
  idUser          String     @map("id_user") @db.Uuid
  idRoute         String     @map("id_route") @db.Uuid
  body            String
  imgComment      String?    @map("img_comment")
  idParentComment String?    @map("id_parent_comment") @db.Uuid
  createdAt       DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)
  parentComment   Comments?  @relation("CommentsToComments", fields: [idParentComment], references: [idComment], onDelete: Cascade, onUpdate: NoAction)
  replies         Comments[] @relation("CommentsToComments")
  route           Routes     @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  user            Users      @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_comments_route_id")
  @@index([idUser], map: "idx_comments_user_id")
  @@map("comments")
}

model Favorites {
  idFavorite String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_favorite") @db.Uuid
  idUser     String    @map("id_user") @db.Uuid
  idRoute    String    @map("id_route") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  route      Routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  user       Users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_favorites_route_id")
  @@index([idUser], map: "idx_favorites_user_id")
  @@map("favorites")
}

model ImagesRoutes {
  idImage   String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_image") @db.Uuid
  idRoute   String    @map("id_route") @db.Uuid
  imageUrl  String    @map("image_url")
  type      String?   @default("gallery") @db.VarChar(50)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  route     Routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)

  @@map("images_routes")
}

model Locations {
  idLocation String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_location") @db.Uuid
  nLocation  String    @map("n_location") @db.VarChar(255)
  latitude   Float
  longitude  Float
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  routes     Routes[]

  @@map("locations")
}

model Notifications {
  idNotification     String                @id @default(dbgenerated("gen_random_uuid()")) @map("id_notification") @db.Uuid
  title              String                @db.VarChar(255)
  description        String?
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  notificationsUsers NotificationsUsers[]

  @@map("notifications")
}

model NotificationsUsers {
  idNotificationUser String        @id @default(dbgenerated("gen_random_uuid()")) @map("id_notification_user") @db.Uuid
  idNotification     String        @map("id_notification") @db.Uuid
  idUser             String        @map("id_user") @db.Uuid
  isRead             Boolean?      @default(false) @map("is_read")
  createdAt          DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  notification       Notifications @relation(fields: [idNotification], references: [idNotification], onDelete: Cascade, onUpdate: NoAction)
  user               Users         @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@map("notifications_users")
}

model Ratings {
  idRating     String          @id @default(dbgenerated("gen_random_uuid()")) @map("id_rating") @db.Uuid
  description  String?
  usersRatings UsersRatings[]

  @@map("ratings")
}

model RefreshTokens {
  idRefreshToken String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_refresh_token") @db.Uuid
  idUser         String    @map("id_user") @db.Uuid
  token          String
  expiresAt      DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  user           Users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_tokens")
}

model Routes {
  idRoute            String          @id @default(dbgenerated("gen_random_uuid()")) @map("id_route") @db.Uuid
  idUser             String          @map("id_user") @db.Uuid
  title              String          @db.VarChar(255)
  description        String?
  coordinates        Json
  level              Float?
  distance           Float?
  duration           Int?
  averageRating      Float?          @default(0) @map("average_rating")
  startCoordinates   Json?           @map("start_coordinates")
  idCategory         String?         @map("id_category") @db.Uuid
  slugRoute          String?         @unique @map("slug_route") @db.VarChar(255)
  isPublic           Boolean?        @default(true) @map("is_public")
  createdAt          DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?       @default(now()) @map("updated_at") @db.Timestamp(6)
  positiveGradient   Float?        @map("positive_gradient")
  negativeGradient   Float?        @map("negative_gradient")
  cumulativeGradient Float?        @map("cumulative_gradient")
  idLocation         String?         @map("id_location") @db.Uuid
  comments           Comments[]
  favorites          Favorites[]
  imagesRoutes       ImagesRoutes[]
  category           Categories?     @relation(fields: [idCategory], references: [idCategory], onUpdate: NoAction)
  location           Locations?      @relation(fields: [idLocation], references: [idLocation], onUpdate: NoAction)
  user               Users           @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)
  usersRatings       UsersRatings[]

  @@index([idCategory], map: "idx_routes_id_category")
  @@index([slugRoute], map: "idx_routes_slug")
  @@index([idUser], map: "idx_routes_user_id")
  @@map("routes")
}

model Users {
  idUser             String                @id @default(dbgenerated("gen_random_uuid()")) @map("id_user") @db.Uuid
  imgUser            String?               @map("img_user")
  email              String                @unique @db.VarChar(150)
  username           String                @unique @db.VarChar(50)
  name               String?               @db.VarChar(100)
  surname            String?               @db.VarChar(100)
  birthdate          DateTime?             @map("birthdate") @db.Date
  bio                String?
  password           String                @db.VarChar(255)
  role               String?               @default("client") @db.VarChar(20)
  isActive           Boolean?              @default(true) @map("is_active")
  isDeleted          Boolean?              @default(false) @map("is_deleted")
  premiumLevel       Int?                  @default(0) @map("premium_level")
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?             @default(now()) @map("updated_at") @db.Timestamp(6)
  achievementsUsers  AchievementsUsers[]
  admin              Admins?
  client             Clients?
  comments           Comments[]
  favorites          Favorites[]
  notificationsUsers NotificationsUsers[]
  refreshTokens      RefreshTokens[]
  routes             Routes[]
  usersRatings       UsersRatings[]

  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model UsersRatings {
  idUserRating String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_user_rating") @db.Uuid
  idRating     String    @map("id_rating") @db.Uuid
  idUser       String    @map("id_user") @db.Uuid
  idRoute      String    @map("id_route") @db.Uuid
  ratingValue  Int?      @map("rating_value")
  comment      String?
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  rating       Ratings   @relation(fields: [idRating], references: [idRating], onDelete: Cascade, onUpdate: NoAction)
  route        Routes    @relation(fields: [idRoute], references: [idRoute], onDelete: Cascade, onUpdate: NoAction)
  user         Users     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction)

  @@index([idRoute], map: "idx_users_ratings_route_id")
  @@index([idUser], map: "idx_users_ratings_user_id")
  @@map("users_ratings")
}